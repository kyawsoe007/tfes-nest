import * as mongoose from 'mongoose';
const Schema = mongoose.Schema;

export const WorkOrderSchema = new Schema(
  // Base Field
  {
    woNumber: {
      type: String, // AutoGenerated WO0001
    },

    soNumber: {
      type: String,
    },
    woStatus: {
      type: String,
      enum: ['open', 'waiting', 'processing', 'completed', 'cancelled'],
      default: 'open',
    },
    completedDate: {
      type: Date,
    },
    description: {
      type: String,
    },
    orderId: { type: mongoose.Schema.Types.ObjectId, ref: 'SalesOrder' },

    workOrderItems: [
      {
        woItemId: { type: mongoose.Schema.Types.ObjectId },
        runningNum: { type: Number },
        workType: { type: String }, // Pick/Pack, Assembly
        woItemStatus: {
          type: String,
          enum: ['open', 'waiting', 'processing', 'completed'],
          default: 'open',
        },

        // status: {
        //   type: String,
        //   enum: ['open', 'waiting', 'processing', 'completed'],
        //   default: 'open',
        // }, // to be decided
        completedDate: { type: Date },
        completedBy: { type: String }, // Future will be ref User Object Id

        qty: { type: Number },
        description: { type: String },
        skuId: { type: mongoose.Schema.Types.ObjectId, ref: 'Sku' },
        productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
        bom: { type: mongoose.Schema.Types.ObjectId, ref: 'Bom' },
        // newSku: { type: mongoose.Schema.Types.ObjectId },
        picked: { type: String },
        remark: { type: String },
        doStatus: { type: String },
        isCreatedDo: { type: Boolean, default: false },
        uom: { type: mongoose.Schema.Types.ObjectId },
        confirmQty: { type: Number, default: 0 },
        latestQtyInput: { type: Number, default: 0 },
      },
    ],
  },
  {
    timestamps: { createdAt: 'createdAt' },
    toJSON: { virtuals: true },
  },
);

// WorkOrderSchema.set('toJSON', { virtuals: true });
